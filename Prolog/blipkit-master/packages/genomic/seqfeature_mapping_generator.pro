:- module(seqfeature_mapping_generator,
	  [
	   write_mapping_module/0,
	   write_mapping_module/1
	  ]).

:- use_module(bio(ontol_db)).
:- use_module(bio(seqfeature_db)).
:- use_module(bio(genome_db)).

mappable_class(C) :-
	class(R,sequence_feature),
	class(C),
	\+ \+ subclassRT(C,R).

mapping( G ) :-
        mappable_class(BC),
        setof(HC,subclassRT(BC,HC),HCs),
	member(HC,HCs),
	class(HC,HCN1),
	class(BC,BCN),
	downcase_atom(HCN1,HCN),
	Head =.. [HCN,X],
	Body = feature_type(X,BCN),
				% only map to declared unary predicates:
	\+ \+ predicate_property(genome_db:Head,_),
	\+ predicate_property(genome_db:Head,built_in),
	G = (genome_db:Head :- Body).

write_mapping_module :-
	write_mapping_module([]).

write_mapping_module( _Opts) :-
	format('% auto-generated by seqfeature_mapping_generator~n'),
	findall(G,mapping(G),Mappings),
	write_pl([:- module(genome_from_feature_type,[]),
		  :- use_module(bio(seqfeature_db)),
		  :- use_module(bio(genome_db),[]) | Mappings]).

write_pl(L) :-
	forall(member(G,L),
	       write_p(G)).

write_p(G) :-
	numbervars(G,0,_,[singletons(true)]),
	write_term(G,[quoted,numbervars(true)]),
	writeln('.').

		  

	 

/** <module> 

  ---+ Synopsis

==
:- use_module(bio(seqfeature_mapping_generator)).

% 
demo:-
  nl.
  

==

---+ Details



---+ Additional Information

This module is part of blip. For more details, see http://www.blipkit.org

@author  Chris Mungall
@version $Revision$
@see     README
@license License


*/
