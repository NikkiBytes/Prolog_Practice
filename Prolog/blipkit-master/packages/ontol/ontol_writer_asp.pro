/* -*- Mode: Prolog -*- */



:- module(ontol_writer_asp, [
                             write_ontology/2
                             ]).

:- use_module(bio(mode)).
:- use_module(bio(ontol_db)).
:- use_module(bio(bioprolog_util)).

io:write_all(asp,_,_):-
        dsetof(O,ID^N^(belongs(ID,O),class(ID,N)),Os),
        forall(member(O,Os),
               write_ontology(asp,O)).

:- mode write_ontology(+,+) is det.
write_ontology(asp,O):-
        write_header,
        forall_strict(belongs(ID,O),
                      write_entity(asp,ID)).
        
write_header:-
        format('% auto-generated by blip~n'),
        nl.

:- mode write_class(+,+) is det.
write_class(asp,ID):-
        class(ID,_),
        write_lparse_pred(type(ID)),
        forall(subclass(ID,PID),
               write_lparse_pred(is_a(ID,PID))),
        forall(restriction(ID,R,PID),
               write_lparse_pred(type_relation(R,ID,PID))).
        

:- mode write_property(+,+) is det.
write_property(asp,ID):-
        property(ID,_),
        write_lparse_pred(relation(ID)).

:- mode write_entity(+,+) is det.
write_entity(asp,ID):-
        (   class(ID,_)
        ->  write_class(asp,ID)
        ;   property(ID,_)
        ->  write_property(asp,ID)
        ;   throw(error(write_entity(ID)))).

:- mode write_lparse_pred(+) is det.
write_lparse_pred(P):-
        P=..[F|As],
        maplist(safe,As,As2),
        concat_atom(As2,',',S),
        format('~w(~w).~n',[F,S]).

:- mode safe(+,?) is det.
safe(X,X):- number(X),!.
safe(X,S):- sformat(S,'"~w"',[X]).
/** <module>
  @author Chris Mungall
  @version  $Revision: 1.1 $
  @date  $Date: 2006/03/18 03:35:06 $
  @license LGPL

  ---+ Name
  ---++ ontol_writer_asp
- generates lparse-able ontol_db facts

  ---+ Synopsis

  ==
  :- use_module().

  ==

  ---+ Description

  answer set prolog syntax
  
**/
