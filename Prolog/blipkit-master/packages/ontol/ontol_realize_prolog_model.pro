
/* -*- Mode: Prolog -*- */


:- module(ontol_realize_prolog_model,
          [assert_schema/2,
           write_schema/2,
           write_schema/3]).

:- use_module(bio(io)).
:- use_module(semweb(rdf_db)).
:- use_module(semweb(rdfs)).

realize(type(T)):- class(T).
realize(( BP :- AP )):- subclass(A,B),AP=..[A,X],BP=..[B,X].
realize(relation(R,[_,_])):- property(R).

inf_clause( _NS, (Head:-Body), _Opts):-
    rdfs_individual_of(C,owl:'Class'),
    maketerm(C,[I],Head),
    Body=rdfs_individual_of(I,C).


inf_clause( NS, (Head:-Body), Opts ):-
    rdfs_individual_of(R,owl:'ObjectProperty'),
    maketerm(R,[Subj,Obj],Head,NS,_F,Opts),
    %NS:op(300,xfy,F),
    %NS:export(op(300,xfy,F)),
    Body=rdf_has(Subj,R,Obj).

inf_clause( NS, (Head:-Body), Opts ):-
    rdfs_individual_of(R,owl:'DatatypeProperty'),
    maketerm(R,[Subj,Obj],Head,NS,_F,Opts),
    %NS:op(300,xfy,F),
    %NS:export(op(300,xfy,F)),
    Body = (rdf_has(Subj,R,Obj1),
            rdf_literal_to_native(Obj1,Obj)).

property_to_predicate(R,Pred,Opts):-
        property_to_predicate1(R,Pred0,Opts),
        safe_predicate(Pred0,Pred,Opts).

property_to_predicate1(R,Pred,Opts):-
        member(prolog_properties(1),Opts),
        !,
        downcase_atom(R,R1),
        concat_atom(L,'-',R1),
        concat_atom(L,'_',Pred).
property_to_predicate1(R,R,_).

safe_predicate(P1,P2,Opts):-
        T=..[P1,_,_],
        predicate_property(T,_), % builtin
        !,
        (   member(prefix(M),Opts)
        ->  concat_atom([M,P1],'_',P2)
        ;   atom_concat(P1,'_',P2)).
safe_predicate(P,P,_).
                  

inf_export( NS, F/1, _):-
    rdfs_individual_of(C,owl:'Class'),
    rdf_global_id(NS:F,C).
inf_export( NS, F/2, Opts ):-
    rdfs_individual_of(C,owl:'ObjectProperty'),
    rdf_global_id(NS:F0,C),
    property_to_predicate(F0,F,Opts).
inf_export( NS, F/2, Opts ):-
    rdfs_individual_of(C,owl:'DatatypeProperty'),
    rdf_global_id(NS:F0,C),
    property_to_predicate(F0,F,Opts).
inf_export( NS, op(300,xfy,F), Opts ):-
        inf_op(NS,F,Opts).
inf_op( NS, F, Opts ):-
    rdfs_individual_of(C,owl:'ObjectProperty'),
    rdf_global_id(NS:F0,C),
    property_to_predicate(F0,F,Opts).
inf_op( NS, F, Opts ):-
    rdfs_individual_of(C,owl:'DatatypeProperty'),
    rdf_global_id(NS:F0,C),
    property_to_predicate(F0,F,Opts).

assert_clauses(M):-
        forall(inf_clause(M,X),
               M:assert(X)).

write_schema(Local,Global):-
        write_schema(Local,Global,[]).
write_schema(Local,Global,Opts):-
        rdf_register_ns(Local,Global),
        write_schema1(Local,[module(Local)|Opts]).

write_schema1(M,Opts):-
        write_header(M,Opts),
        write_clauses(M,Opts).

write_header(M,Opts):-
        format('%% <module> ~w~n',[M]),
        format('% Autogenerated by ontol_realize_prolog_model~n',[]),
        format('% Example: blip -i biopax-level2.owl ontol-schema  -local biopax2 -ns "http://www.biopax.org/release/biopax-level2.owl#"~n'),
        nl,
        findall(E,inf_export(M,E,Opts),Exports),
        writep( (:- module(M,Exports)) ),
        forall(inf_op(M,F,Opts),
               writep( (:- op(300,xfy,F)) )).
        
write_clauses(M,Opts):-
        forall(inf_clause(M,X,Opts),
               write_clause(X)).

write_clause(X):- writep(X).

assert_schema(Local,Global):-
        rdf_register_ns(Local,Global),
        assert_clauses(Local).

writep(X):- writeq(X),write('.'),nl.
/** <module>
  @author Chris Mungall
  @version  $Revision$
  @date  $Date$
  @license LGPL

  ---+ Name
  ---++ ontol_realize_prolog_model
- 

  ---+ Synopsis

  ==
  :- use_module(bio(ontol_realize_prolog_model)).

  ==

  ---+ Description

  The ontol_db model reifies the domain, placing types and relations in the domain of discourse.
  This implementes the reverse step, generating predicate definitions based on ontology relations.
  
**/
