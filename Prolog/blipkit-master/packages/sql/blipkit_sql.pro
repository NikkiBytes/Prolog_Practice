/* -*- Mode: Prolog -*- */


:- module(blipkit_sql,[]).

:- use_module(bio(rdb_util)).
:- use_module(bio(sql_compiler)).
:- use_module(library(odbc)).
:- use_module(bio(sql_bulkloader)).
:- use_module(bio(sql_compiler)).

blipkit:example('blip -debug load -r enscore/mm_enscore -u blipkit_sql sql-metadata',
                'generate SQL schema metadata in prolog; see also sql/sql_schemas/...').


:- blip('sql-metadata',
        'Extracts metadata from an ODBC db in fmt suitable for sql_compiler',
%        [atom([d,db],Db)],
        [],
        _,
        (   
            nb_getval(rdb,Rdb),
            rdb_handle(Rdb,Dbh),
            format('% Generated by sql-metadata command in blipkit_sql~n'),
            format(':- discontiguous relation/2.~n'),
            format(':- discontiguous attribute/3.~n'),
            format(':- discontiguous unique/3.~n'),
            format('%% IMPORTANT: unique/2 must be entered MANUALLY - cannot introspect~n'),
            nl,
            setof(Fact,db_info(Dbh,Fact),Facts),
            forall((member(relation(R,Arity,RelationType,_),Facts),
		    RelationType\=type('VIEW')),
                   (   
                       findall(Attr-Type,member(attribute(_,R,Attr,Type,_),Facts),AttrInfos),
                       maplist(attr_info_to_atom,AttrInfos,Attrs),
                       concat_atom(Attrs,', ',AttrsListAtom),
                       format('%% ~w(~w) is nondet~n',[R,AttrsListAtom]),
                       format('% maps to sql ~w~n',RelationType),                       
                       format('~w.~n',relation(R,Arity)),
                       forall(member(attribute(Ord,R,Attr,Type,_),Facts),
                              format('~q.~n',attribute(Ord,R,Attr,Type))))))).

attr_info_to_atom(Attr-Type,Atom):-
        upcase_atom(Attr,AttrU),
        concat_atom(['?',AttrU,':',Type],Atom).


:- blip('sql',
        'SQL query',
%        [atom([d,db],Db)],
        [],
        SqlStmts,
        (   
            nb_getval(rdb,Rdb),
            rdb_handle(Rdb,Dbh),
            %rdb_connect(Rdb,Db),
            %rdb_handle(Rdb,Dbh),
            forall(member(Sql,SqlStmts),
                   (   
                       debug(sql,'sql ~w',[Sql]),
                       odbc_prepare(Dbh,Sql,[],Sth),
                       debug(sql,'got sth ~w',[Sth]),
                       forall(odbc_execute(Sth,[],Row),
                              writeln(Row)))),
            odbc_disconnect(Dbh))).

blipkit:example('blip -debug sql -r obd/obdgo sql-map -schema sql_schema/schema_obd -u blipkit_sql  -proj X "node(_,X,\'apoptosis\',_,_,_,_,_,_,_)"',
                'find nodes called apoptosis in OBD schema database').
%blip -debug sql -r enscore/homo_sapiens_core -u blipkit_sql sql-map -schema sql_schema/schema_enscore44 -proj X "xref(X,_,_,'BRCA1',_,_,_,_)"
blipkit:example('blip -debug sql -r enscore/homo_sapiens_core -u blipkit_sql sql-map -schema sql_schema/schema_enscore44 -proj "foo(X,GID,ENSID)" "xref(X,_,_,\'BRCA1\'),gene(GID,_,_,_,_,_,_,X),gene_stable_id(GID,ENSID)"',
                'find ensembl ID for BRCA1').

% TODO - must include all vars in Proj...
:- blip('sql-map',
        'rewrite prolog query to SQL and executes it',
        [
         %atom([d,db],Db),
         atom([proj,project],Proj),
         atoms([schema],Schemas)
        ],
        Queries,
        (   
            nb_getval(rdb,Rdb),
            rdb_handle(Rdb,Dbh),
            forall(member(Schema,Schemas),
                   load_schema_defs(bio(Schema))),
            %rdb_connect(Rdb,Db),
            %rdb_handle(Rdb,Dbh),
            forall(member(Query,Queries),
                   (   
                       atom_to_term(Query,QueryTerm,QueryBindings),
                       (   var(Proj)
                       ->  ProjTerm=QueryTerm
                       ;   atom_to_term(Proj,ProjTerm,ProjectionBindings),
                           unify_bindings_projection_to_query(ProjectionBindings,QueryBindings)),
                       forall(rdb_query(Rdb,ProjTerm,QueryTerm),
                              format('~q.~n',[ProjTerm])))),
            odbc_disconnect(Dbh))).

:- blip('prolog-to-sql',
        'rewrite prolog query to SQL and display it',
        [
         %atom([d,db],Db),
         atom([proj,project],Proj),
         atoms([schema],Schemas)
        ],
        Queries,
        (   
            forall(member(Schema,Schemas),
                   load_schema_defs(bio(Schema))),
            forall(member(Query,Queries),
                   (
                    atom_to_term(Query,QueryTerm,QueryBindings),
                    (   var(Proj)
                    ->  ProjTerm=QueryTerm
                    ;   atom_to_term(Proj,ProjTerm,ProjectionBindings),
                        unify_bindings_projection_to_query(ProjectionBindings,QueryBindings)),
                    plterm_to_sqlterm(ProjTerm,QueryTerm,SqlTerm),
                    debug(sql_compiler,'Sqlterm=~w',[SqlTerm]),
                    sqlterm2atom(SqlTerm,Sql),
                    writeln(Sql)
                   )
                  ))).


% all proj bindings must be found in Q bindings
unify_bindings_projection_to_query([Name=Var|ProjectionBindings],QueryBindings):-
        select(Name=Var,QueryBindings,QueryBindingsRest),
        !,
        unify_bindings_projection_to_query(ProjectionBindings,QueryBindingsRest).
unify_bindings_projection_to_query([],_):- !. % we allow leftovers in Q
unify_bindings_projection_to_query(L,_):-
        throw(cannot_unify(L)).

:- blip('prolog-to-ddl',
        'translates prolog source to SQL DDL',
        [],
        Files,
        (   
            ensure_loaded(bio(sql_schema_creator)),
	    maplist(convert_file,Files))).

:- blip('db-to-ddl',
        'translates a blip db module to SQL DDL',
        [],
        Mods,
        (   
            ensure_loaded(bio(sql_schema_creator)),
	    maplist(convert_module,Mods))).

:- blip('sql-dump',
        'writes contents of blip db module to SQL dump',
        [atom(dir,Dir,'.'),
         atom(dbms,DBMS,pg),
         atom(metadata,Metadata,dbmeta),
         atoms(schema,Schemas),
         number(varchar_size,VCS,-1)
         ],
        Mods,
        (   maplist(load_schema_defs,Schemas),
            write_dump(Dir,Mods,[metadata(Metadata),dbms(DBMS),varchar_size(VCS)]))).


            

/** <module>   
  @author Chris Mungall
  @version  $Revision: 1.2 $
  @date  $Date: 2006/03/25 01:57:15 $
  @license LGPL

  ---+ Name
  ---++ blipkit
- simple interface to blip module functionality

  ---+ Description

  this is a submodule of blipkit for handling sql*/
