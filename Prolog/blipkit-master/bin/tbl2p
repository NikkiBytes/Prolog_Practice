#!/usr/bin/perl

use strict;
use Getopt::Long;

my $fields = '';
my $delimiter = "\t";
my $newline;
my $pred;
my $cols;
my $prefixcolh = {};
my @pre = ();
my $use_hdr;
my $ignore_hdr;
my $list2p;
my $keylist2p;
my $use_filename;
my $no_quote;
my $gzip;
my $select;
my $csv;
my $mf;
my $dequote;
@ARGV = map {if (/^\-f(\d+)/) {("-f", $1)}else{$_}} @ARGV;
GetOptions("fields|f=s"=>\$fields,
	   "delimiter|d=s"=>\$delimiter,
	   "newline=s"=>\$newline,
           "predicate|p=s"=>\$pred,
           "use_filename"=>\$use_filename,
           "no_quote|n"=>\$no_quote,
           "cols|c=s"=>\$cols,
           "prefix=s%"=>$prefixcolh,
           "pre=s@"=>\@pre,
           "use_hdr"=>\$use_hdr,
           "gzip"=>\$gzip,
           "dequote"=>\$dequote,
           "csv"=>\$csv,
           "mf"=>\$mf,
           "ignore_hdr"=>\$ignore_hdr,
           "list2p|l"=>\$list2p,
           "select|s=s"=>\$select,
           "keylist2p|k"=>\$keylist2p,
           "help|h"=>sub {print usage();exit(0)},
    );

my %printed_directive = ();
$list2p = 1 if $keylist2p;

if ($newline) {
    $/ = $newline;
}
else {
    $newline = "\n";
}

my $line_no=0;
my %warn_h = ();

if (!$pred && $use_filename) {
    $pred = $ARGV[0];
    $pred =~ s/.*\///;
    $pred =~ s/\..*//;
}

if (scalar(@ARGV) && $ARGV[0] =~ /\.gz$/) {
    $gzip = 1;
}
if ($gzip) {
    @ARGV = map { /\.(gz|Z)$/ ? "gzip -dc < $_ |" : $_ } @ARGV;
}

if ($select) {
    $select = [map {$_-1} split(/,/,$select)];
}

while(<>) {
    $line_no++;
    chomp;
    if ($csv) {
        $delimiter = '","';
        s/^\"//;
        s/\"$//;
    }
    my @fields = split(/$delimiter/, $_, -1); # preserve trailing blank
    if ($dequote) {
        map {
            s/^\"//;
            s/\"$//;
        } @fields;
    }
    my $curr_pred = $pred ? $pred : shift @fields;
    unshift(@fields, @pre);
    if ($line_no==1 && $ignore_hdr) {
        next;
    }
    if ($line_no==1 && $use_hdr) {
        $curr_pred = 'column_order';
    }
    if ($cols) {
        if (scalar @fields > $cols) {
            $warn_h{"truncating extra cols"} = 1;
            @fields = splice(@fields,0,$cols);
        }
        while (scalar @fields < $cols) {
            push(@fields, undef);
        }
    }
    if ($select) {
        my @nu = map {$fields[$_]} @$select;
        @fields = @nu;
    }
    if (keys %$prefixcolh) {
        foreach my $k (keys %$prefixcolh) {
            my $prefix = $prefixcolh->{$k};
            foreach my $pcol (split(/\,\s*/,$k)) {
                $fields[$pcol-1] = $prefix."$fields[$pcol-1]";
            }
        }
    }
    if ($mf) {
        my $pa = $curr_pred."/".scalar(@fields);
        if (!$printed_directive{$pa}) {
            print ":- multifile $pa.\n";
            $printed_directive{$pa} = 1;
        }
    }
    printf "$curr_pred(%s).\n",
      join(', ', map {pquote($_)} @fields)
        if @fields > 0;
}
exit 0;

sub pquote {
    my $s = shift;
    return $s if $no_quote;
    $s='' unless defined $s;
    if ($list2p && $s =~ /\[(.*)]/) {
	my @elts = split(/,\s*/,$1);
	if ($keylist2p) {
	    return sprintf("[%s]",
			   join(', ',
				map {
				    if (/([\d\.\-]+)\-(\S+)/) {
					"$1-".pquote($2);
				    }
				    else {
					pquote($_)
				    }
				} @elts));
	}
	return sprintf("[%s]",join(', ',map {pquote($_)} @elts));
    }
    if ($s =~ /^\-?[0-9]+$/) {
	return $s;
    }
    if ($s =~ /^\-?[0-9]+\.[0-9]+$/) {
	return $s;
    }
    if ($s =~ /^\-?[0-9]+\.[0-9]+e[\+\-]\d+$/i) {
	return $s;
    }
    $s =~ s@\\@\\\\@g;
    $s =~ s/\'/\'\'/g;
    "'$s'";
}

sub usage {
    <<EOM;
tbl2p [OPTS] file
translates tabular data file to prolog unit clauses

 -d|delimiter         character that delimits columns
 -p                   predicate name for all data (defaults to col1)
 -use_hdr             use the first line of the file as a header

EOM
}

__END__

=head1 NAME

=head1 SYNOPSIS


=head1 DESCRIPTION

=head2 ARGUMENTS

=over


=item d|delimiter

tab is the default

=item newline

\n is the default

=back

=cut

