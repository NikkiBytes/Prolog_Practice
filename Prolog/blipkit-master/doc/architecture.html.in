  <page>
    <title>Blip: Architecture</title>
    <section id="Architecture">
      <p>
        Blip is a data integration toolkit. It wraps a variety of file
        formats and data resources (called <b>bioresources</b>),
        providing a unified query layer
      </p>
      <subsection id="Diagram">
        <p>
          This figure shows how a general purpose application (in this
          case Amigo-NG, a <pageref page="serval"/> web application)
            queries data from a variety of sources
        </p>
        <img src="images/arch.png"></img>
        <p>TODO: imagemap this png</p>
        <p>TODO: fix diagram - prolog xml transform now used in place
          of XSL for SBML data</p>
        <p>
          The core of Amigo-NG is a generic ontology class and
          instance browser. Any biological model and data can be
          represented as classes and instances, so Amigo-NG can act as
          a generic data browser. The architecture also allows for
          various plugins to create user-views over specific data
          types, with the help of specific blip db modules.
        </p>
      </subsection>
        
      <subsection id="Bioresources">
        <p>
          At the bottom of the diagram are the <pageref
            page="bioresources"/>. For AmiGO these will typically be files
            containing class data and ontology instance data (in OBO or
            OWL format), although different AmiGO plugins extend the basic
            AmiGO class-and-instance layer views, which may require
            different input files
        </p>
      </subsection>

      <subsection id="The prolog database">
        <p>
          bioresources are typically loaded into the in-memory prolog
          database using a variety of mechanisms. The prolog database is
          partitioned into seperate modules; class and instance data
          live in either the rdf_db module or the <moduleref
            to="ontol_db"/> db module, organismal taxonomy into <moduleref
              to="taxon_db"/> db, etc. Each of these db modules has a set of
              extensional and intensional predicates (ie the actual data
              predicates and view predicates). By partitioning into modules
              we avoid predicate clashes. Predicates can either be imported
              into the user space or refered to by prefixing the module name.
        </p>
      </subsection>

      <subsection id="Parsers">
        <p>
          Some file formats can be read in directly; for example. the NH
          and NHX phylogenetic tree format can be parsed using the
          <moduleref to="parser_nhx"/> module. For <url to="OWL"/>
              files, SWI-Prolog comes with rdf_db and owl modules
              (themselves layered off of the SWI sgml module, which cab
              parse XML).
        </p>
        <p>
          The user or application programmer does not need to worry
          about using parsers directly - this is all handled by the
          <moduleref to="io"/> module.
        </p>
      </subsection>

      <subsection id="Prolog fact files">
        <p>
          Many bio file formats are ad-hoc text formats. Whilst prolog
          is an ideal language for implementing parsers, we have chosen
          not to reinvent the wheel here - we use existing parsers
          (BioPerl, go-perl and XSLT stylesheets) to convert native file
          formats into prolog fact files which can then be loaded
          directly into the prolog in-memory database. This approach is
          not ideal, as many existing perl parsers are slow.
        </p>
        <p>
          The user or application programmer does not need to worry
          about the details of converting bio formats to fact files -
          this is all handled by the <moduleref to="io"/> module.
        </p>
      </subsection>

      <subsection id="XML mapping modules">
      <p>
        Many data resources exist in XML format. SWI-Prolog comes with
        an XML parser, and blip comes with <modulref
        to="xml_transform"/> which is a prolog specification language
        for mapping XML files to data predicates
      </p>

      <p>
        The specifications themselves live in xmlmap modules - for
        example, <moduleref to="seqfeature_xmlmap_chaos"/> which is a
        mapping between <url to="Chaos-XML"/> files and the data
        predicates defined in the <moduleref to="seqfeature_db"/>
        module. Currently the mapping is one-way, but it will soon be
        reversible
        </p>
      </subsection>

      <subsection id="Bridge modules">
        <p>
        Bridge modules can be used where two db modules cover similar
        domains.  For example, the SWI-Prolog owl.pl module and the
        blip <modulref to="ontol_db"/> db modules have similar
        functionality. Applications such as AmiGO-NG use the ontol_db
        interface. AmiGO-NG can be used seamlessly over OWL ontologies
        using <moduleref to="ontol_bridge_to_owl"/>. Bridge modules
        can also be used to provide abstract relational views over
        ontology instance data.
        </p>
      </subsection>

      <subsection id="SQL Databases">
        <p>
          Prolog is both a database and an application
          language. Sometimes it may be desirable to swap in an
          existing relational database in place of the in-memory
          prolog database. This can be done seamlessly by using the
          sqldb bridges, for example <moduleref
          to="ontol_bridge_from_gosql"/>, which maps tables in the GO
          SQL database (see <url to="amigo"/>) to the data predicates
          defined in <moduleref to="ontol_db"/>
        </p>
      </subsection>

      <subsection id="Applications">
        <p>
          Applications can integrate various resources using the
          <moduleref to="io"/> module, and then query them using the
            predicates defined in any particular db module. Utility
            modules such as <moduleref to="bioseq"/> provide useful
              operations on the different kinds of data
        </p>
        <p>
          See <pageref page="applications"/> for some blip apps
        </p>
      </subsection>

    </section>

    <lastmod>
      <!-- Created: Mon May  2 09:02:21 PDT 2005 -->
      <!-- hhmts start -->
Last modified: Thu Aug 25 15:03:04 PDT 2005
<!-- hhmts end -->
    </lastmod>

  </page>
